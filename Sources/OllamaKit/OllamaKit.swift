//
//  OllamaKit.swift
//
//
//  Created by Kevin Hermawan on 10/11/23.
//

import Alamofire
import Foundation

/// A Swift library for interacting with the Ollama API.
///
/// `OllamaKit` simplifies the process of connecting Swift applications to the Ollama API, abstracting the complexities of network requests and data handling.
public struct OllamaKit {
    private var router: OKRouter.Type
    private var decoder: JSONDecoder = .default
    
    /// Initializes a new instance of `OllamaKit` with the specified base URL for the Ollama API.
    ///
    /// This initializer configures `OllamaKit` with a base URL, laying the groundwork for all network interactions with the Ollama API. It ensures that the library is properly set up to communicate with the API endpoints.
    ///
    /// - Parameter baseURL: The base URL to be used for Ollama API requests.
    public init(baseURL: URL) {
        let router = OKRouter.self
        router.baseURL = baseURL
        
        self.router = router
    }
}

extension OllamaKit {
    /// Checks the reachability of the Ollama API.
    ///
    /// This asynchronous method performs a network request to determine if the Ollama API is reachable from the current client. It can be used to verify network connectivity and API availability before attempting further API interactions.
    ///
    /// - Returns: A Boolean value indicating whether the Ollama API is reachable (`true`) or not (`false`).
    public func reachable() async -> Bool {
        let request = AF.request(router.root).validate()
        let response = request.serializingData()
        
        do {
            _ = try await response.value
            
            return true
        } catch {
            return false
        }
    }
}

extension OllamaKit {
    /// Establishes a stream to the Ollama API for generating responses based on the provided data.
    ///
    /// This method continuously streams responses as they are generated by the Ollama API,
    /// with the final response including detailed data about the generation process.
    ///
    /// - Parameters:
    ///   - data: The data used to generate the stream.
    ///   - stream: A closure that processes the streaming data.
    public func generate(data: OKGenerateRequestData, stream: @escaping (DataStreamRequest.Stream<OKGenerateResponse, AFError>) -> Void) {
        let request = AF.streamRequest(router.generate(data: data)).validate()
        request.responseStreamDecodable(of: OKGenerateResponse.self, using: decoder, stream: stream)
    }
}

extension OllamaKit {
    /// Asynchronously retrieves a list of available models from the Ollama API.
    ///
    /// This method returns an `OKModelResponse` containing the details of the available models,
    /// making it easy to understand what models are currently accessible.
    ///
    /// - Returns: An `OKModelResponse` object listing the available models.
    public func models() async throws -> OKModelResponse {
        let request = AF.request(router.models).validate()
        let response = request.serializingDecodable(OKModelResponse.self, decoder: decoder)
        
        return try await response.value
    }
}

extension OllamaKit {
    /// Asynchronously fetches detailed information about a specific model from the Ollama API.
    ///
    /// This method provides comprehensive details about the model, such as its modelfile, template, and parameters.
    ///
    /// - Parameter data: The data specifying the model to inquire about.
    /// - Returns: An `OKModelInfoResponse` containing detailed information about the model.
    public func modelInfo(data: OKModelInfoRequestData) async throws -> OKModelInfoResponse {
        let request = AF.request(router.modelInfo(data: data)).validate()
        let response = request.serializingDecodable(OKModelInfoResponse.self, decoder: decoder)
        
        return try await response.value
    }
}

extension OllamaKit {
    /// Facilitates the duplication of an existing model, creating a new instance under a different name.
    ///
    /// This asynchronous method makes it straightforward to copy a model, requiring only the necessary parameters for the operation.
    ///
    /// - Parameter data: The data required for the model copy operation.
    /// - Throws: An error if the copy operation fails.
    public func copyModel(data: OKCopyModelRequestData) async throws -> Void {
        let request = AF.request(router.copyModel(data: data)).validate()
        let response = request.serializingData()
        
        _ = try await response.value
    }
}

extension OllamaKit {
    /// Removes a specified model and its data from the Ollama API.
    ///
    /// This asynchronous method allows for the deletion of a model, requiring the model name to be specified for a successful operation.
    ///
    /// - Parameter data: The data specifying the model to be deleted.
    /// - Throws: An error if the deletion fails.
    public func deleteModel(data: OKDeleteModelRequestData) async throws -> Void {
        let request = AF.request(router.deleteModel(data: data)).validate()
        let response = request.serializingData()
        
        _ = try await response.value
    }
}
